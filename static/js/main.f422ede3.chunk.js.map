{"version":3,"sources":["components/Game.js","App.js","serviceWorker.js","index.js"],"names":["deadCell","background","aliveCell","D_SIZE","RUNNING","STOPPED","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCellClick","e","state","gameState","index","Number","target","getAttribute","temp","toConsumableArray","cells","isAlive","setState","makeEmptyCells","i","push","id","startGame","intervalId","setInterval","simulateCells","stopGame","clearInterval","resetGame","generationCount","newCells","deadCells","length","count","neighborCount","newCount","neighbor","validateCell","getGrid","dimension","leftOffset","Math","floor","rightOffset","start","end","element","cell","react_default","a","createElement","className","cell-index","style","key","onClick","Component","App","src_components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f422ede3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Game.css'\n\n// colors for dead and alive cells\nconst deadCell = {\n    background: \"black\"\n};\n\nconst aliveCell = {\n    background: \"#4cbb17\"\n};\n\n// using same row and columns size\nconst D_SIZE = 90;\n\n// state constants\nconst RUNNING = \"running\";\nconst STOPPED = \"stopped\";\n\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cells: [],\n            intervalId: '',\n            gameState: STOPPED,\n            generationCount: 0\n        }\n    }\n\n   \n\n    handleCellClick = (e) => {\n        if (this.state.gameState === RUNNING) return;\n        const index = Number(e.target.getAttribute(\"cell-index\"));\n        const temp = [...this.state.cells];\n        temp[index].isAlive = !temp[index].isAlive;\n        \n        this.setState({cells: temp});\n    }\n\n    makeEmptyCells = () => {\n        let temp = [];\n        for(let i = 0; i < D_SIZE*D_SIZE; ++i) {\n            temp.push({id: i, isAlive: false});\n        }\n        return temp;\n    }\n\n    startGame = () => { \n        if (this.state.gameState === RUNNING) return;\n        this.setState({\n            intervalId: setInterval(this.simulateCells, 300),\n            gameState: RUNNING\n        });\n    }\n\n    stopGame = () => {\n        if (this.state.gameState === STOPPED) return;\n        clearInterval(this.state.intervalId);\n        this.setState({\n            intervalId: '',\n            gameState: STOPPED\n        })\n    }\n\n    resetGame = () => {\n        clearInterval(this.state.intervalId);\n        let temp = this.makeEmptyCells();\n        this.setState({\n            cells: temp,\n            intervalId: '',\n            gameState: STOPPED,\n            generationCount: 0\n        })\n    }\n\n    simulateCells = () => {\n        let cells = [...this.state.cells];\n        let newCells = [];\n        let deadCells = [];\n        for (let i = 0; i < cells.length; ++i) {\n            let count = this.neighborCount(cells, cells[i].id);\n            if (cells[i].isAlive) {     \n                if (count !==2 && count !== 3) deadCells.push(i);\n            } else {\n                if (count === 3) newCells.push(i);   \n            }\n        }\n        \n        for(let i = 0; i < newCells.length; ++i) cells[newCells[i]].isAlive = true;\n        for(let i = 0; i < deadCells.length; ++i) cells[deadCells[i]].isAlive = false;\n\n        let newCount = this.state.generationCount + 1;\n\n        this.setState({\n            cells: cells,\n            generationCount: newCount\n        });\n\n    }\n\n    neighborCount = (cells, i) => {\n        let neighbor = 0;\n        \n        // check left neighbor\n        if (this.validateCell(i - 1) && (i) % D_SIZE !== 0 && cells[i - 1].isAlive ) ++neighbor;\n        //check right neighbor\n        if (this.validateCell(i + 1) && (i + 1) % D_SIZE !== 0 && cells[i + 1].isAlive ) ++neighbor;\n        //check upper neighnor\n        if (this.validateCell(i - D_SIZE) && cells[i - D_SIZE].isAlive) ++neighbor;\n        //check below neighbor\n        if (this.validateCell(i + D_SIZE) && cells[i + D_SIZE].isAlive) ++neighbor;\n        // check upper left\n        if (this.validateCell(i - D_SIZE - 1) && (i - D_SIZE) % D_SIZE !== 0 && cells[i - D_SIZE - 1].isAlive ) ++neighbor;\n        // check upper right\n        if (this.validateCell(i - D_SIZE + 1) && (i - D_SIZE + 1) % D_SIZE !== 0 && cells[i - D_SIZE + 1].isAlive ) ++neighbor;\n        // check lower left\n        if (this.validateCell(i + D_SIZE - 1) && (i + D_SIZE) % D_SIZE !== 0 && cells[i + D_SIZE - 1].isAlive ) ++neighbor;\n        // check lower right\n        if (this.validateCell(i + D_SIZE + 1) && (i + D_SIZE + 1) % D_SIZE !== 0 && cells[i + D_SIZE +1].isAlive ) ++neighbor;\n\n\n        return neighbor;\n    }\n\n    validateCell = (i) => {\n        if (i >=0 && i < D_SIZE*D_SIZE) return true;\n        return false;\n    }\n\n    // outputs the grid with the specified dimension from the complete grid\n    getGrid = (dimension) => {\n        let leftOffset = Math.floor((D_SIZE - dimension)/2); // starts from left edge\n        let rightOffset = D_SIZE - leftOffset; // goes to till here from the right edge\n        let cells = [];\n        let start = leftOffset * D_SIZE, end = (rightOffset - 1) * D_SIZE + rightOffset, count = leftOffset;\n\n        while ( start + count < end && this.state.cells.length > 0) {\n            let element = this.state.cells[start + count];\n            let cell = (\n                <div className=\"game-cell\" cell-index={element.id} style={element.isAlive ? aliveCell : deadCell} key={element.id} onClick={this.handleCellClick}>\n                </div>\n            )\n            cells.push(cell);\n            ++count;\n            if (count >= rightOffset) {\n                count = leftOffset;\n                start += D_SIZE;\n            }\n        }\n\n        return cells;\n    }\n\n    componentDidMount() {\n        let temp = this.makeEmptyCells();   \n        this.setState({cells : temp});\n    }\n\n    render() {\n        const cells = this.getGrid(50);\n        return (\n            <div className=\"game\">\n                <div className=\"game-header\">\n                    <div id=\"game-title\">Conway's Game of Life</div>\n                    <div className=\"game-control\">\n                    <button className=\"game-btns\" onClick={this.startGame}>Start</button>\n                    <button className=\"game-btns\" onClick={this.stopGame}>Stop</button>\n                    <button className=\"game-btns\" onClick={this.resetGame}>Reset</button>\n                    <div className=\"generation-count\" >Generation {this.state.generationCount}</div>\n                    </div>\n                </div>\n                <div className=\"game-board\">\n                    {cells}\n                </div>\n            </div>\n        );\n    }\n}\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}